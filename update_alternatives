#!/usr/bin/python -tt
# -*- coding: utf-8 -*-

# (c) 2012, Philipp Grau <phgrau@zedat.fu-berlin.de>
#
# This module is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This software is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this software.  If not, see <http://www.gnu.org/licenses/>.
#

DOCUMENTATION = """
---
module: update_alternatives
short_description: Handle debian C(update-alternatives) in a idempotent way
description:
    - Handle debian C(update-alternatives) in a idempotent way.
      Maintain symbolic links determining default commands.
      Can ensure that the highest priority alternative is chosen or
      select a specific binary as the chosen one
    
version_added: "0.9.2"
author: Philipp Grau
notes:
    - This applies to Debian and Ubuntu systems only!
options:
# One or more of the following
    link:
        description:
            - Name of the link group (e.g. editor, awk). To list available link
              groups use C(update-alternatives --get-selections)
        required: true
        default: null
    target:
      description:
          - To which absolute path link should point, updates link group as
            well, must start with a "/", or if set to "best" the linkgroup
            with the highest priority is used
      required: true
      choices: [ file, "best" ]
      default: null
examples:
# One or more of the following:
    - code: update-alternatives link=editor target=/usr/bin/vim.basic
      description: This verifies that editor points to /usr/bin/vim.basic
      (if /usr/bin/vim.basic is a valid alternative)
      
    - code: update-alternatives link=editor target=best
      description: Point to the highest priority installed alternatives
requirements: [ update-alternatives ]
"""

import subprocess
import os.path
import re
import traceback
# added to stave off future warnings about apt api
import warnings

warnings.filterwarnings('ignore', "apt API not stable yet", FutureWarning)

# update-alternatives related constants
UA = "/usr/sbin/update-alternatives"


class Alternative(object):
    def __init__(self, module, command="update-alternatives", path="/usr/sbin"):
        self.module = module
        self.command = command
        self.path = path

    def exist(self):
        return os.path.exists(os.path.join(self.path, self.command))

    def run(self, arguments):
        command = " ".join([os.path.join(self.path, self.command), arguments])
        try:
            cmd = subprocess.Popen(
                command, shell=True,
                stdout=subprocess.PIPE, stderr=subprocess.PIPE
            )
            out, err = cmd.communicate()
        except (OSError, IOError), e:
            (rc, err, out) = (1, str(e), '')
        except:
            (rc, err, out) = (1, traceback.format_exc(), '')
        else:
            rc = cmd.returncode

        return rc, out, err

    def status(self, link):
        rc, out, err = self.run("--query %s" % link)
        if err == "update-alternatives: error: no alternatives for %s.\n" % link:
            self.module.fail_json(msg="No alternatives for %s found" % link)

        if rc:
            self.module.fail_json(
                msg="'update-alternatives --query %s' failed: %s" % (link, err))
            self.module.exit_json(changed=True)

        result = dict()
        for key in ['Link', 'Status', 'Best', 'Value']:
            m = re.search(r'^{key}:\s+(?P<value>.+)'.format(key=key), out, re.MULTILINE)
            if m is not None:
                result[key] = m.group('value')
            else:
                self.module.fail_json(
                    msg="Couldn't parse find '{0}' in output".format(key)
                )

        return result['Link'], result['Best'], result['Value']

    def best(self, link):
        g, b, v = self.status(link)
        if b == v:
            self.module.exit_json(changed=False)
        rc, out, err = self.run("--auto %s" % link)
        if err == "update-alternatives: error: no alternatives for %s.\n" % link:
            self.module.fail_json(msg="No alternatives for %s found" % link)

        if rc:
            self.module.fail_json(
                msg="'update-alternatives --auto %s' failed: %s" % (link, err))

        self.module.exit_json(changed=True)

    def set_to_target(self, link, package):
        g, b, v = self.status(link)
        if package == v:
            self.module.exit_json(changed=False)

        rc, out, err = self.run("--set %s %s" % (link, package))
        if rc:
            self.module.fail_json(msg="Something broke: %s" % err)

        self.module.exit_json(changed=True)


def main():
    module = AnsibleModule(
        argument_spec=dict(
            link=dict(default=None, aliases=['name']),
            package=dict(default=None, aliases=['pkg', 'path', 'target']),
        )
    )

    # Link: editor\nStatus: manual\nBest: /usr/bin/joe\nValue: /usr/bin/vim.gtk\n\n

    ua = Alternative(module)
    if not ua.exist():
        module.fail_json(msg="Cannot find update-alternatives")

    p = module.params
    if p['link'] is None:
        module.fail_json(msg='link=name is required')
    if p['package'] is None:
        module.fail_json(msg='package=name is required')
    if p['package'] == 'best':
        ua.best(p['link'])
    if re.match(r'/.+', p['package']):
        ua.set_to_target(p['link'], p['package'])
    else:
        module.fail_json(msg='Package options needs to be path oder "best"')

# this is magic, see lib/ansible/module_common.py
#<<INCLUDE_ANSIBLE_MODULE_COMMON>>
main()