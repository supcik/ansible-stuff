#!/usr/bin/python -tt
# -*- coding: utf-8 -*-

# (c) 2012, Philipp Grau <phgrau@zedat.fu-berlin.de>
#
# This module is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This software is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this software.  If not, see <http://www.gnu.org/licenses/>.
#

DOCUMENTATION = """
---
module: update_alternatives
short_description: Handle debian C(update-alternatives) in a idempotent way
description:
    - Handle debian C(update-alternatives) in a idempotent way.
      Maintain symbolic links determining default commands.
      Can ensure that the highest priority alternative is chosen or
      select a specific binary as the chosen one
    
version_added: "0.9"
author: Philipp Grau
notes:
    - This applies to Debian and Ubuntu systems only!
options:
# One or more of the following
    link:
        description:
            - Name of the link group (e.g. editor, awk). To list available link groups
              use C(update-alternatives --get-selections)  
        required: true
        default: null
    target:
      description:
          - To which absolute path link should point, updates link group as well, must start with a "/",
            or if set to "best" the linkgroup with the highest priority is used
      required: true
      choices: [ file, "best" ]
      default: null
examples:
# One or more of the following:
    - code: update-alternatives link=editor target=/usr/bin/vim.basic
      description: This verifies that editor points to /usr/bin/vim.basic (if /usr/bin/vim.basic is a valid alternative)
      
    - code: update-alternatives link=edior target=best
      description: Point to the highest priority installed alternatives
requirements: [ update-alternatives ]
"""


import traceback
# added to stave off future warnings about apt api
import warnings
warnings.filterwarnings('ignore', "apt API not stable yet", FutureWarning)

# update-alternatives related constants
UA = "/usr/sbin/update-alternatives"

def run_ua(command):
    try:
        cmd = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        out, err = cmd.communicate()
    except (OSError, IOError), e:
        rc = 1
        err = str(e)
        out = ''
    except:
        rc = 1
        err = traceback.format_exc()
        out = ''
    else:
        rc = cmd.returncode
        return rc, out, err

def ua_status(m,link):

    cmd = "%s --query %s" % (UA, link)
    rc, out, err = run_ua(cmd)
    if err == "update-alternatives: error: no alternatives for %s.\n" % (link):
        m.fail_json(msg="No alternatives for %s found" % (link))

    if rc:
        m.fail_json(msg="'update-alternatives --query %s' failed: %s" % (link, err))
        m.exit_json(changed=True)

    result = re.match( r"""
        ^(?:Name:\s+.+\n)?
        Link:\s+(?P<link>.+)\n
        (?:Slaves:\n
        (?:\s+.+\n)*)?
        Status:\s+(?P<status>.+)\n
        Best:\s+(?P<best>.+)\n
        Value:\s+(?P<value>.+)
        """, out, re.MULTILINE|re.VERBOSE) 

    if not result:
        m.fail_json(msg="Couldn't parse update-alternatives output: %r" % (out,))

    return result.group('link'), result.group('best'), result.group('value')


def best(m, link):
    g, b, v = ua_status(m,link)
    if b == v:
        m.exit_json(changed=False)
    cmd = "%s --auto %s" % (UA, link)
    rc, out, err = run_ua(cmd)
    if err == "update-alternatives: error: no alternatives for %s.\n" % (link):
        m.fail_json(msg="No alternatives for %s found" % (link))

    if rc:
        m.fail_json(msg="'update-alternatives --auto %s' failed: %s" % (link, err))

    m.exit_json(changed=True)

def set_to_target(m, link, package):
    g, b, v = ua_status(m,link)
    if package == v:
        m.exit_json(changed=False)

    cmd = "%s --set %s %s" % (UA, link, package)
    rc, out, err = run_ua(cmd)
    if rc:
        m.fail_json(msg="Something broke: %s" % (err))

    m.exit_json(changed=True)

def main():
    module = AnsibleModule(
        argument_spec = dict(
            link = dict(default=None, aliases=['name']),
            package = dict(default=None, aliases=['pkg', 'path','target']),
        )
    )

    # Link: editor\nStatus: manual\nBest: /usr/bin/joe\nValue: /usr/bin/vim.gtk\n\n

    if not os.path.exists(UA):
        module.fail_json(msg="Cannot find update-alternatives")

    p = module.params
    if p['link'] is None:
        module.fail_json(msg='link=name is required')
    if p['package'] is None:
        module.fail_json(msg='package=name is required')
    if p['package'] == 'best':
        best(module,p['link'])
    if re.match(r'/.+', p['package']):
        set_to_target(module,p['link'],p['package'])
    else:
        module.fail_json(msg='Package options needs to be path oder "best"')

# this is magic, see lib/ansible/module_common.py
#<<INCLUDE_ANSIBLE_MODULE_COMMON>>

main()
